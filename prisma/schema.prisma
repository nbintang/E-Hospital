generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  DOCTOR
  PATIENT
  ADMIN
}

enum AppointmentStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

enum Gender {
  MALE
  FEMALE
}

enum QuestionStatus {
  PENDING
  ANSWERED
}

enum OrderStatus {
  SHIPPED
  PROCESSING
  DELIVERED
}

enum ArticleStatus {
  DRAFT
  PUBLISHED
}

model Users {
  id           String        @id @default(uuid())
  email        String        @unique
  password     String
  role         Role          @default(PATIENT)
  profile      Profile?
  doctor       Doctor?
  questions    Question[]
  appointments Appointment[]
  orders       Order[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
}

model Profile {
  id          String   @id @default(uuid())
  fullname    String
  addressId   String?
  profileUrl  String?
  bioPdfUrl   String?
  gender      Gender?
  height      String?
  phoneNumber String?
  weight      String?
  userId      String   @unique
  user        Users    @relation(fields: [userId], references: [id])
  address     Address? @relation("UserProfileAddress", fields: [addressId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Doctor {
  id               String         @id @default(uuid())
  userId           String         @unique
  hospitalId       String
  specializationId String
  specialization   Specialization @relation(fields: [specializationId], references: [id])
  user             Users          @relation(fields: [userId], references: [id])
  hospital         Hospital       @relation(fields: [hospitalId], references: [id])
  questions        Answer[]
  articles         Article[]
  appointments     Appointment[]
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
}

model Specialization {
  id        String   @id @default(uuid())
  name      String   @unique
  doctors   Doctor[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Answer {
  id          String   @id @default(uuid())
  textContent String   @db.Text
  doctorId    String
  question    Question @relation(fields: [questionId], references: [id])
  questionId  String
  doctor      Doctor   @relation(fields: [doctorId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Question {
  id          String         @id @default(uuid())
  slug        String         @unique
  title       String
  userId      String
  status      QuestionStatus @default(PENDING)
  textContent String         @db.Text
  user        Users          @relation(fields: [userId], references: [id])
  categories  Category[]     @relation("QuestionCategories") // New relation
  answers     Answer[]
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
}

model Article {
  id         String        @id @default(uuid())
  slug       String        @unique
  title      String
  imageUrl   String
  content    String        @db.Text
  status     ArticleStatus
  doctorId   String
  doctor     Doctor        @relation(fields: [doctorId], references: [id])
  categories Category[]    @relation("ArticleCategories")
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
}

model Category {
  id        String     @id @default(uuid())
  slug      String     @unique
  name      String
  questions Question[] @relation("QuestionCategories")
  articles  Article[]  @relation("ArticleCategories")
  medicine  Medicine[] @relation("MedicineCategories")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now())
}

model Medicine {
  id          String     @id @default(uuid())
  name        String
  price       Float
  description String
  categories  Category[] @relation("MedicineCategories") // New relation
  orders      Order[] // Existing relation
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
}

model Address {
  id        String     @id @default(uuid())
  slug      String     @unique
  latitude  Float // Latitude for geolocation
  longitude Float // Longitude for geolocation
  name      String     @db.VarChar(255)
  profiles  Profile[]  @relation("UserProfileAddress")
  hospitals Hospital[] @relation("HospitalAddress")
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Hospital {
  id          String        @id @default(uuid())
  slug        String        @unique
  name        String
  addressId   String
  doctors     Doctor[]
  address     Address       @relation("HospitalAddress", fields: [addressId], references: [id])
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  Appointment Appointment[]
}

model Appointment {
  id         String            @id @default(uuid())
  userId     String
  doctorId   String
  hospitalId String
  dateTime   DateTime
  status     AppointmentStatus @default(PENDING)
  user       Users             @relation(fields: [userId], references: [id])
  doctor     Doctor            @relation(fields: [doctorId], references: [id])
  hospital   Hospital          @relation(fields: [hospitalId], references: [id])
  createdAt  DateTime          @default(now())
  updatedAt  DateTime          @updatedAt
}

model Order {
  id         String      @id @default(uuid())
  userId     String
  medicineId String
  quantity   Int
  totalPrice Float
  status     OrderStatus @default(PROCESSING)
  stock      Int
  user       Users       @relation(fields: [userId], references: [id])
  medicine   Medicine    @relation(fields: [medicineId], references: [id])
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
}
